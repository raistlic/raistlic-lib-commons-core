buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'signing'
    id 'maven-publish'
}

wrapper {
    gradleVersion = '6.8.3'
}

ext.packaging = 'jar'

description = """Raistlic's Commons Library"""
version = {
    String v = java.util.Optional.ofNullable(System.getenv('CURRENT_VERSION')).orElse('dev')
    println "building with current project version: ${v}"
    return v
}()

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    mavenLocal()
}

apply from: "${rootProject.projectDir}/gradle/coverage.gradle"

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.13.1'
    compile group: 'com.esotericsoftware.yamlbeans', name: 'yamlbeans', version:'1.09'
    
    testCompile "org.codehaus.groovy:groovy-all:2.4.1"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"    // allows mocking of classes without default constructor (together with CGLIB)
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile group: 'pl.pragmatists', name: 'JUnitParams', version:'1.0.4'
}

// ---------------------------------------------------------------------------------------------------------------------
//  for gradle tasks encoding on Windows machine
// ---------------------------------------------------------------------------------------------------------------------

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.locale = 'en_US'
}

// ---------------------------------------------------------------------------------------------------------------------
//  for maven publish
// ---------------------------------------------------------------------------------------------------------------------

java {
    withSourcesJar()
    withJavadocJar()
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

publishing {
    repositories {
        maven {
            final String releaseRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            final String snapshotRepo = 'https://oss.sonatype.org/content/repositories/snapshots/'
            final findProperty = {String k, v ->
                return project.hasProperty(k) ? project.property(k) : v
            }
            url = project.version.endsWith('SNAPSHOT') ? snapshotRepo : releaseRepo
            println "publishing to url: ${url} ..."
            credentials {
                username = findProperty('maven.username', '')
                password = findProperty('maven.password', '')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Raistlic's Commons Library" as String
                description = 'Common utilities to make general tasks in Java programs easier.'
                url = 'https://github.com/raistlic'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'leic'
                        name = 'Lei Chen'
                        email = 'raistlic@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/raistlic/raistlic-lib-commons-core'
                    connection = 'https://github.com/raistlic/raistlic-lib-commons-core'
                    developerConnection = 'https://github.com/raistlic/raistlic-lib-commons-core'
                }
            }
        }
    }
}

signing {
    final hasRequiredProperties = {
        boolean missingProperty = [
                'signing.keyId',
                'signing.password',
                'signing.secretKeyFile'
        ].any {
            boolean result = !project.hasProperty(it)
            if (result) {
                println "missing property: ${it}"
            }
            return result
        }
        return !missingProperty
    }
    required hasRequiredProperties
    sign publishing.publications.mavenJava
    if (hasRequiredProperties()) {
        println 'required properties found and configuring signing task ...'
        final String signingKeyId = project.properties['signing.keyId'] as String
        final String signingPassword = project.properties['signing.password'] as String
        final String signingKey = new File(project.properties['signing.secretKeyFile'] as String).text
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    } else {
        println 'required properties missing and ignoring signing task.'
    }
}
